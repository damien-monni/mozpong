{"version":3,"file":"index.html","sources":["pong.c"],"names":[],"mappingsqDA;AACA;AAEA;AAAA;AAEA;AAAA;;AACA;AAAA;AAAA;;AA+BA;;AA3BA;AAAA;AAEA;AAAA;AAMA;;AACA;AAAA;AAAA;;AAkBA;;AAdA;AAAA;AACA;;AACA;AAAA;AAAA;;AAYA;;AARA;;AAQA;;;;;;;;;;;;;AAOA;AACA;;AAGA;AAAA;AAAA;AAAA;AAAA;;AAuCA;;AAlCA;AAAA;AACA;;AAGA;AAAA;AAAA;AAAA;AAAA;;AA8BA;;AAzBA;AAGA;AACA;;AAGA;AAAA;AAAA;AAAA;AAAA;;AAkBA;;AAbA;AAAA;AAQA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;;AACA;;;;;;;;;;;;;;;;;;AAiHA;AAAA;;;AACA;;;AAYA;AAAA;;AACA;;AAGA;AAAA;AAAA;;;AADA;AAAA;AAAA;;;AADA;AAAA;AAAA;;;AAGA;AAAA;AAAA;;;;;;;AAdA;AAAA;;AACA;;AACA;AAAA;AAAA;;;AAGA;AAAA;AAAA;;;AADA;AAAA;AAAA;;;AADA;AAAA;AAAA;;;;;;;;AAPA;AAAA;;;;;;AAyBA;AAAA;;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AA6DA;;AAzDA;AAzIA;AACA;AAEA;AAGA;AAAA;AAAA;AAAA;AAAA;AAIA;AAgIA;AA1IA;AACA;AAEA;AAGA;AAAA;AAAA;AAAA;AAAA;AAIA;AAiIA;AAAA;AA7HA;AACA;AACA;AACA;AAEA;AACA;AAGA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AA4GA;AAhGA;AAOA;;AAyFA;AA7FA;AALA;AAOA;AAMA;AAIA;AAJA;AAQA;AARA;;AAYA;AAAA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAEA;AAHA;AACA;AAqEA;AAEA;AAAA;AAAA;AAAA;;;;;;;;;AAFA;;;AAIA;AApGA;AAOA;;AA6FA;AAjGA;AALA;AAOA;AAMA;AAIA;AAJA;AAQA;AARA;;AAYA;AAAA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAEA;AAHA;AACA;AAyEA;AAEA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;AAFA;;;AAhEA;;;AACA;AAAA;AAAA;AAsEA;;;;AAlEA;AAAA;;AACA;AAAA;AAAA;AAiEA;;;;;AA5DA;AAAA;;;;AAAA;AAAA;AAAA;;;;;;AACA;AAAA;;AAyDA;AAeA;AAAA;AAAA;AAAA;;AACA;AAAA;AACA;AAAA;AAAA;AAAA;;;;;AAjBA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;;AACA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAtKA;AACA;AACA;AACA;;AA+KA;AAAA;AAEA;AAAA;AACA;AAAA;AAGA;AAAA;AACA;AAAA;AAGA;AAAA;AACA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;;;;;;;AAKA;AAAA;;AACA;;AAoDA;;AA/CA;AAAA;AAAA;AAEA;AAAA;AAAA;;AACA;;AA4CA;;AAnQA;AACA;AACA;AACA;AAHA;AACA;AACA;AACA;AAuOA;AAAA;AAAA;AAAA;AAAA;AAAA;AA1OA;AACA;AACA;AACA;AA8OA;AAMA;AAAA;AACA;AAEA;AAAA;AACA;AAEA;AAAA;AACA;AAEA;AACA;;AAEA","sourcesContent":["#include <stdio.h>\n#include <time.h>\n#include <stdlib.h>\n\n#ifdef EMSCRIPTEN\n#include <SDL.h>\n#include <SDL_image.h>\n#include <emscripten/emscripten.h>\n#else\n#include <sdl2/SDL.h>\n#include <sdl2/SDL_image.h>\n#endif\n\nstatic const int SCREEN_WIDTH = 640;\nstatic const int SCREEN_HEIGHT = 480;\nstatic const char *title_img_path = \"x.png\";\nstatic const char *ball_img_path = \"dot.bmp\";\n#ifdef EMSCRIPTEN\nstatic const int velocity = 10;\nint ball_vel_x = 5, ball_vel_y = 0;\n#else\nstatic const int velocity = 1;\nint ball_vel_x = 1, ball_vel_y = 0;\n#endif\n\n#define TRUE 1\n#define FALSE 0\n\nint collision;\nint ball_w;\nint ball_h;\nint player1_vel = 0, player2_vel = 0;\nint player1_score =0, player2_score =0;\nint start_time = 0;\n\nstatic int quit = FALSE;\nstatic int show_title = TRUE;\n\nstatic SDL_Window *window = NULL;\nstatic SDL_Surface *screen_surface = NULL;\nstatic SDL_Surface *png_surface = NULL;\nstatic SDL_Texture *texture = NULL;\nstatic SDL_Texture *ball_texture = NULL;\nstatic SDL_Renderer *renderer = NULL;\n\nSDL_Rect player1, player2, ball;\n\nSDL_Rect *clip = NULL;\nSDL_Point *center = NULL;\ndouble angle = 0.0;\nSDL_RendererFlip flip = SDL_FLIP_NONE;\n\nint init(SDL_Window **window, SDL_Renderer **renderer) {\n  printf(\"Use <up-arrow> and <down-arrow> to control RED player\\n\");\n  printf(\"Use 'w' and 's' to control BLUE player\\n\");\n\n  srand(time(NULL));\n\n  if( SDL_Init( SDL_INIT_VIDEO ) < 0 ) {\n    printf( \"SDL could not initialize! SDL_Error: %s\\n\", SDL_GetError() );\n    return 1;\n  }\n\n  start_time = SDL_GetTicks();\n  //Create window\n  *window = SDL_CreateWindow( \"Ping pong\",\n                             SDL_WINDOWPOS_UNDEFINED,\n                             SDL_WINDOWPOS_UNDEFINED,\n                             SCREEN_WIDTH,\n                             SCREEN_HEIGHT,\n                             SDL_WINDOW_SHOWN );\n  if( window == NULL ) {\n    printf( \"Window could not be created! SDL_Error: %s\\n\", SDL_GetError() );\n    return 1;\n  }\n\n  *renderer = SDL_CreateRenderer(*window, -1, SDL_RENDERER_ACCELERATED);\n  if(renderer == NULL) {\n    printf(\"Renderer could not be created! SDL Error: %s\\n\", SDL_GetError());\n    return 1;\n  }\n\n  SDL_SetRenderDrawColor(*renderer, 0xFF, 0xFF, 0xFF, 0xFF);\n\n  /* int imgFlags = IMG_INIT_PNG; */\n  /* if( !( IMG_Init( imgFlags ) & imgFlags ) ) { */\n  /*   printf( \"SDL_image could not initialize! SDL_image Error: %s\\n\", IMG_GetError() ); */\n  /*   return 1; */\n  /* } */\n\n  return 0;\n}\n\nint load_texture(SDL_Texture **texture,\n                 SDL_Texture **ball_texture,\n                 SDL_Renderer *renderer) {\n  //Load image at specified path\n  SDL_Surface *loaded_surface = IMG_Load(title_img_path);\n  if(loaded_surface == NULL){\n    printf( \"Unable to load image %s! SDL_image Error: %s\\n\",\n            title_img_path,\n            IMG_GetError());\n    return 1;\n  }\n\n  //Create texture from surface pixels\n  *texture = SDL_CreateTextureFromSurface(renderer, loaded_surface);\n  if( texture == NULL ){\n    printf( \"Unable to create texture from %s! SDL Error: %s\\n\",\n            title_img_path,\n            SDL_GetError() );\n    return 1;\n  }\n\n  //Get rid of old loaded surface\n  SDL_FreeSurface(loaded_surface);\n\n  //Load image at specified path\n  loaded_surface = IMG_Load(ball_img_path);\n  if(loaded_surface == NULL){\n    printf( \"Unable to load image %s! SDL_image Error: %s\\n\",\n            ball_img_path,\n            IMG_GetError());\n    return 1;\n  }\n\n  //Create texture from surface pixels\n  *ball_texture = SDL_CreateTextureFromSurface(renderer, loaded_surface);\n  if( texture == NULL ){\n    printf( \"Unable to create texture from %s! SDL Error: %s\\n\",\n            ball_img_path,\n            SDL_GetError() );\n    return 1;\n  }\n\n  ball_w = loaded_surface->w;\n  ball_h = loaded_surface->h;\n\n  //Get rid of old loaded surface\n  SDL_FreeSurface(loaded_surface);\n  return 0;\n}\n\nvoid set_position(SDL_Rect* player, int x, int y, int w, int h) {\n  player->x = x;\n  player->y = y;\n  player->w = w;\n  player->h = h;\n}\n\nvoid move(SDL_Rect* player, int velocity) {\n  int y = player->y;\n  int h = player->h;\n\n  y = y + velocity;\n\n  // don't go out of screen!!\n  if (y+h > SCREEN_HEIGHT || y < 0) {\n    y = y - velocity;\n  }\n\n  player->y = y;\n}\n\nvoid move_ball(SDL_Rect* ball, int velocity_x, int velocity_y) {\n  int x = ball->x;\n  int y = ball->y;\n  int h = ball->h;\n  int w = ball->w;\n\n  x = x + velocity_x;\n  y = y + velocity_y;\n\n  // don't go out of screen!!\n  if (x+w > SCREEN_WIDTH || x < 0) {\n    x = x - velocity_x;\n  }\n\n  // don't go out of screen!!\n  if (y+h > SCREEN_HEIGHT || y < 0) {\n    y = y - velocity_y;\n  }\n\n  ball->x = x;\n  ball->y = y;\n}\n\nint check_collision(SDL_Rect A, SDL_Rect B) {\n  int leftA, leftB;\n  int rightA, rightB;\n  int topA, topB;\n  int bottomA, bottomB;\n\n  leftA = A.x;\n  rightA = A.x+A.w;\n  topA = A.y;\n  bottomA = A.y+A.h;\n\n  leftB = B.x;\n  rightB = B.x + B.w;\n  topB = B.y;\n  bottomB = B.y+B.h;\n\n  if(bottomA <= topB) {\n    return 1;\n  }\n\n  if(topA >= bottomB) {\n    return 1;\n  }\n\n  if(rightA <= leftB) {\n    return 1;\n  }\n\n  if(leftA >= rightB) {\n    return 1;\n  }\n\n  int midA = topA + (A.h / 2);\n  int midB = topB + (B.h / 2);\n\n  if(midB >= midA ) {\n    ball_vel_y = abs(ball_vel_y+1);\n  } else {\n    ball_vel_y = -abs(ball_vel_y+1);\n  }\n  return 0;\n}\n\nint hit_wall() {\n  // we hit the side wall\n  if ((ball.x <= 0)){\n    player2_score++;\n    return 1;\n  }\n\n  if ((ball.x + ball.w) >= SCREEN_WIDTH) {\n    player1_score++;\n    return 1;\n  }\n\n  // we hit top and bottom\n  if ((ball.y-5 <= 0) || ((ball.y+ball.h+5) >= SCREEN_HEIGHT)){\n    ball_vel_y = -ball_vel_y;\n  }\n\n  return 0;\n}\n\nvoid loop() {\n  static SDL_Event event;\n\n  while(SDL_PollEvent(&event) != 0) {\n    if (event.type == SDL_QUIT){\n      quit = TRUE;\n    }\n    if( event.type == SDL_KEYDOWN && event.key.repeat == 0 ) {\n      switch( event.key.keysym.sym ) {\n      case SDLK_UP: player1_vel -= velocity; break;\n      case SDLK_DOWN: player1_vel += velocity; break;\n      case SDLK_w: player2_vel -= velocity; break;\n      case SDLK_s: player2_vel += velocity; break;\n      case SDLK_q : quit = TRUE; break;\n      default: break;\n      }\n    } else if( event.type == SDL_KEYUP && event.key.repeat == 0 ) {\n      switch( event.key.keysym.sym ) {\n      case SDLK_UP: player1_vel += velocity; break;\n      case SDLK_DOWN: player1_vel -= velocity; break;\n      case SDLK_w: player2_vel += velocity; break;\n      case SDLK_s: player2_vel -= velocity; break;\n      default: break;\n      }\n    }\n  }\n\n  //Render texture to screen\n  if (show_title) {\n    SDL_RenderClear(renderer);\n    SDL_RenderCopy(renderer, texture, NULL, NULL );\n    SDL_RenderPresent(renderer);\n\n    show_title = FALSE;\n    SDL_Delay(500);\n    return;\n  }\n\n  move(&player1, player1_vel);\n  move(&player2, player2_vel);\n  move_ball(&ball, ball_vel_x, ball_vel_y);\n\n  collision = check_collision(player1, ball);\n  if(collision == 0){\n    ball_vel_x = abs(ball_vel_x);\n  }\n  collision = check_collision(player2, ball);\n  if(collision == 0){\n    ball_vel_x = -(abs(ball_vel_x));\n  }\n\n  collision = hit_wall();\n  if(collision == 1){\n    printf(\"Scores: RED PLAYER: %d, BLUE PLAYER: %d\\n\", player1_score, player2_score);\n    ball_vel_y = rand() % 3 - 1;\n    ball_vel_x = -abs(ball_vel_x);\n\n    if (player1_score > player2_score)\n      ball_vel_x = abs(ball_vel_x);\n\n    set_position(&ball,\n                 SCREEN_WIDTH/2 - ball_w/2,\n                 SCREEN_HEIGHT/2 - ball_h/2,\n                 ball_w,\n                 ball_h);\n  } else {\n    if ( SDL_GetTicks() - start_time > 1000) {\n      start_time = SDL_GetTicks();\n      ball_vel_y = rand() % 10 - 8;\n    }\n  }\n\n  SDL_RenderClear(renderer);\n\n  SDL_SetRenderDrawColor(renderer, 0xFF, 0xFF, 0xFF, 0xFF);\n  SDL_RenderClear(renderer);\n\n  //Render player1\n  SDL_SetRenderDrawColor( renderer, 0xFF, 0x00, 0x00, 0xFF );\n  SDL_RenderFillRect( renderer, &player1 );\n\n  //Render player2\n  SDL_SetRenderDrawColor( renderer, 0x00, 0x00, 0xFF, 0xFF );\n  SDL_RenderFillRect( renderer, &player2 );\n\n  //Render the ball\n  SDL_RenderCopyEx(renderer,\n                   ball_texture,\n                   clip,\n                   &ball,\n                   angle,\n                   center,\n                   SDL_FLIP_NONE);\n\n  //Update screen\n  SDL_RenderPresent(renderer);\n}\n\nint main(int argc, char *args[]){\n\n  if (init(&window, &renderer) == 1){\n    printf(\"Failed to init system\\n\");\n    return 1;\n  }\n\n  //Get window surface\n  screen_surface = SDL_GetWindowSurface(window);\n\n  if(load_texture(&texture, &ball_texture, renderer) == 1){\n    printf(\"Failed to load texture\\n\");\n    return 1;\n  }\n\n  // set up player1\n  set_position(&player1,\n               0,\n               SCREEN_HEIGHT / 2 -  SCREEN_HEIGHT / 12,\n               10,\n               SCREEN_HEIGHT / 6);\n\n  // set up player2\n  set_position(&player2,\n               SCREEN_WIDTH - 10,\n               SCREEN_HEIGHT / 2 - SCREEN_HEIGHT / 12,\n               10,\n               SCREEN_HEIGHT / 6);\n\n  // set up the ball\n  set_position(&ball,\n               SCREEN_WIDTH/2 - ball_w/2,\n               SCREEN_HEIGHT/2 - ball_h/2,\n               ball_w,\n               ball_h);\n\n#ifdef EMSCRIPTEN\n  emscripten_set_main_loop(loop, 0, 1);\n#else\n  while(!quit) {\n    loop();\n  }\n#endif\n  SDL_DestroyTexture(texture);\n  texture = NULL;\n\n  SDL_DestroyRenderer(renderer);\n  renderer = NULL;\n\n  SDL_DestroyWindow(window);\n  window = NULL;\n\n  IMG_Quit();\n  SDL_Quit();\n\n  return 0;\n}\n"]}